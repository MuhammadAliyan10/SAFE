// /prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Currency {
  PKR
  USD
  INR
}

enum InvoiceStatus {
  DRAFT
  SENT
  PAID
  OVERDUE
}

enum TaxType {
  FBR
  NONE
}

enum NotificationType {
  EMAIL
  WHATSAPP
  PUSH
}

enum ProjectType {
  BUSINESS_SECURITY
  INVOICING
  DOCUMENT_SECURITY
  ALL_SERVICES
}

enum ClientStatus {
  ACTIVE
  INACTIVE
  OVERDUE
}

enum DocumentType {
  ID_CARD
  CONTRACT
  LICENSE
  OTHER
}

enum PaymentMethodType {
  JAZZCASH
  EASYPAISA
  SADAPAY
  STRIPE
  PAYPAL
  WISE
}

enum SubscriptionStatus {
  ACTIVE
  PAUSED
  CANCELLED
}

enum Role {
  FREELANCER
  SMALL_BUSINESS
}

enum PaymentStatus {
  SUCCESS
  FAILED
  PENDING
  REFUNDED
}

enum ThreatType {
  PHISHING
  MALWARE
  DDoS
  RANSOMWARE
  DATA_LEAK
}

model User {
  id             String            @id @default(uuid())
  email          String            @unique
  workingEmail   String?           @unique
  username       String            @unique
  password       String
  profileImage   String?
  googleId       String?           @unique
  twoFactor      Boolean           @default(false)
  twoFactorType  String?
  role           Role              @default(FREELANCER)
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt
  clients        Client[]
  projects       Project[]
  invoices       Invoice[]
  expenses       Expense[]
  sessions       Session[]
  taxes          Tax[]
  notifications  Notification[]
  subscriptions  Subscription[]
  documents      Document[]
  backups        Backup[]
  auditLogs      AuditLog[]
  emailSettings  EmailSetting[]
  paymentMethods PaymentMethod[]
  apiKeys        ApiKey[]
  storefronts    Storefront[]
  paymentHistory PaymentHistory[]
  threatLogs     ThreatLog[]
  cashFlow       CashFlow[]
  emails         Email[]
}

model Project {
  id             String            @id @default(uuid())
  name           String
  description    String
  type           ProjectType       @default(ALL_SERVICES)
  info           Json              @default("{}")
  userId         String
  invoice        Invoice[]
  user           User              @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt
  emails         Email[]
}

model Session {
  id        String   @id
  userId    String
  expiresAt DateTime
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@map("sessions")
}

model Client {
  id             String            @id @default(uuid())
  userId         String
  user           User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  name           String
  email          String
  phone          String?
  status         ClientStatus      @default(ACTIVE)
  projectHistory Json?
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt
  invoices       Invoice[]
}

model Invoice {
  id             String            @id @default(uuid())
  userId         String
  user           User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  clientId       String
  client         Client            @relation(fields: [clientId], references: [id], onDelete: Cascade)
  invoiceNumber  String            @unique
  projectId      String
  project        Project           @relation(fields: [projectId], references: [id])
  amount         Float
  currency       Currency          @default(PKR)
  status         InvoiceStatus     @default(DRAFT)
  dueDate        DateTime
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt
  paymentMethod  PaymentMethod?   @relation(fields: [paymentMethodId], references: [id])
  paymentMethodId String?
  paymentHistory PaymentHistory[]
  notifications  Notification[]
  template       String?
}

model Expense {
  id            String            @id @default(uuid())
  userId        String
  user          User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  amount        Float
  currency      Currency          @default(PKR)
  category      String
  description   String?
  receiptUrl    String?
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
}

model Tax {
  id            String            @id @default(uuid())
  userId        String
  user          User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  type          TaxType           @default(FBR)
  amount        Float
  currency      Currency          @default(PKR)
  dueDate       DateTime
  deductions    Json?
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
}

model Notification {
  id            String            @id @default(uuid())
  userId        String
  user          User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  invoiceId     String?
  invoice       Invoice?          @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
  type          NotificationType
  message       String
  isRead        Boolean           @default(false)
  snoozeUntil   DateTime?
  createdAt     DateTime          @default(now())
}

model Subscription {
  id            String            @id @default(uuid())
  userId        String
  user          User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  plan          String
  status        SubscriptionStatus @default(ACTIVE)
  billingCycle  String
  nextBilling   DateTime
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
  paymentHistory PaymentHistory[]
}

model Document {
  id            String            @id @default(uuid())
  userId        String
  user          User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  type          DocumentType
  fileUrl       String
  hash          String
  timestamp     DateTime          @default(now())
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
  auditLogs     AuditLog[]
  permissions   Json?
}

model AuditLog {
  id            String            @id @default(uuid())
  userId        String
  user          User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  documentId    String?
  document      Document?         @relation(fields: [documentId], references: [id], onDelete: Cascade)
  action        String
  details       Json?
  createdAt     DateTime          @default(now())
}

model Backup {
  id            String            @id @default(uuid())
  userId        String
  user          User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  backupUrl     String
  createdAt     DateTime          @default(now())
}

model EmailSetting {
  id            String    @id @default(uuid())
  userId        String
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  provider      String
  oauthToken    String
  refreshToken  String?
  filterConfig  Json?
  historyId     String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model PaymentMethod {
  id            String            @id @default(uuid())
  userId        String
  user          User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  type          PaymentMethodType
  details       Json
  invoices      Invoice[]
  paymentHistory PaymentHistory[]
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
}

model PaymentHistory {
  id            String            @id @default(uuid())
  userId        String
  user          User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  invoiceId     String?
  invoice       Invoice?          @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
  subscriptionId String?
  subscription  Subscription?     @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)
  paymentMethodId String?
  paymentMethod PaymentMethod?    @relation(fields: [paymentMethodId], references: [id], onDelete: Cascade)
  amount        Float
  currency      Currency          @default(PKR)
  status        PaymentStatus
  transactionId String?
  createdAt     DateTime          @default(now())
}

model ApiKey {
  id            String            @id @default(uuid())
  userId        String
  user          User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  platform      String
  key           String            @unique
  rateLimit     Int?
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
}

model Storefront {
  id            String            @id @default(uuid())
  userId        String
  user          User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  platform      String
  apiKey        String?
  riskScore     Float?
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
  threatLogs    ThreatLog[]
}

model ThreatLog {
  id            String            @id @default(uuid())
  userId        String
  user          User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  storefrontId  String?
  storefront    Storefront?       @relation(fields: [storefrontId], references: [id], onDelete: Cascade)
  type          ThreatType
  description   String
  resolved      Boolean           @default(false)
  createdAt     DateTime          @default(now())
}

model CashFlow {
  id            String            @id @default(uuid())
  userId        String
  user          User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  predictedAmount Float
  currency      Currency          @default(PKR)
  period        String
  riskAlert     String?
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
}

model Email {
  id        String    @id
  userId    String
  projectId String
  threadId  String
  snippet   String
  from      String
  to        String
  subject   String
  date      DateTime
  labels    String[]
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  project   Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)
}
